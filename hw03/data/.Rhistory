result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
result_CI <- rep(NA,1000)
for (i in 1:1000){ #bootstrap sampling
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result_CI[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result_CI
quantile(result_CI, c(0.05, 0.95))
result_CI <- rep(NA,1000)
for (i in 1:1000){ #bootstrap sampling
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result_CI[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result_CI
quantile(result_CI, c(0.05, 0.95))
result_CI <- rep(NA,1000)
for (i in 1:1000){ #bootstrap sampling
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result_CI[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result_CI
quantile(result_CI, c(0.05, 0.95))
result_CI <- rep(NA,1000)
for (i in 1:1000){ #bootstrap sampling
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result_CI[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result_CI
quantile(result_CI, c(0.05, 0.95))
result_CI <- rep(NA,1000)
for (i in 1:1000){ #bootstrap sampling
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result_CI[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result_CI
quantile(result_CI, c(0.05, 0.95))
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
knitr::include_graphics("~/Desktop/h.png")
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
#(h) calculate the variance of the estimators of theta from the bootstrap method
B=100
result <-rep (NA,100)
for (i in 1:100){
unif_sample <- runif(n = 132, min = 0, max = 1)
Ray_sample <- (mle_theta_long * sqrt (-2 * log(unif_sample)))
result[i] <-  sqrt(sum(Ray_sample^2)/(2*132))
}
result
#computw the mean
mean(result)
#compute the variance
var(result)
#draw histogram
hist(result, xlab = "estimate of theta", ylab = "frequency")
#compute the asymtotic variance for the data_long
var_mle_long <- (mle_theta_long^2) / (4*n_long)
var_mle_long
#now, compute the standard deviation
SD_bootstrap <- sqrt(var(result))
SD_bootstrap
#compute the standard error for the variance that we found before
SE_mle_long <- sqrt(var_mle_long)
SE_mle_long
#compute the absolute error between SD and SE
abs_error <- abs(SD_bootstrap-SE_mle_long)
abs_error
#by computation of absolute error, observe that they are considerabley close (by three digits)
total.min <-
gsw %>%
group_by(minute,name) %>%
select(minute,name,shot_type) %>%
summarise(total = length(shot_type))
setwd("/Users/liushaoyu/Documents/hw-stat133-liushaoyusz/hw03/data")
knitr::opts_chunk$set(echo = TRUE)
source("../code/binomial-functions.R")
knitr::opts_chunk$set(echo = TRUE)
source("binomial-functions.R")
bin_probability(trials = 10, success = 3, prob = 1/6)
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1)
n <- c(3:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2)
getwd()
setwd("I")
setwd(l)
setwd("L")
knitr::opts_chunk$set(echo = TRUE)
source("binomial-functions.R")
bin_probability(trials = 10, success = 3, prob = 1/6)
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1)
n <- c(3:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2)
setwd("../hw-stat133/hw03")
cut -f 2 -d "," nba2017-roster.cvs |
sort -u > team-names.txt
head -5
setwd("report")
setwd("../data")
getwd()
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1,main = "success and probability for prob = 0,25")
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1,main = "success and probability for prob = 0.25")
n <- c(4:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
source("../code/binomial-functions.R")
bin_probability(trials = 10, success = 3, prob = 1/6)
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1,main = "success and probability for prob = 0.25")
n <- c(4:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2 , xlab = "number of heads",ylab = "success probability")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
source("../code/binomial-functions.R")
bin_probability(trials = 10, success = 3, prob = 1/6)
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1,main = "success and probability for prob = 0.25")
n <- c(4:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2 , xlab = "number of heads",ylab = "success probability")
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2 , xlab = "number of heads",ylab = "success probability", main = "trials = 15, prob = 0.35")
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1, xlab = "number of heads", ylab = "success probability", main = "trials = 10, prob = 0.25")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
source("../code/binomial-functions.R")
bin_probability(trials = 10, success = 3, prob = 1/6)
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1, xlab = "number of heads", ylab = "success probability", main = "trials = 10, prob = 0.25")
n <- c(4:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2 , xlab = "number of heads",ylab = "success probability", main = "trials = 15, prob = 0.35")
