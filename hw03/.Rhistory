strings_dists[i] == get_dist(distances, a_i)
}
strings_dists
# use your own 'first' and 'last' objects
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
first <- c('H', 'A', 'O')
last <- c('W', 'A', 'N', 'G')
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- rep(0, length(strings))
n <- length(strings)
for ( i in 1:n ) {
a_i <- strings[[i]]
strings_dists[i] = get_dist(distances, a_i)
}
strings_dists
# use your own 'first' and 'last' objects
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
first <- c('H', 'A', 'O')
last <- c('W', 'A', 'N', 'G')
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- rep(0, length(strings))
n <- length(strings)
for ( i in 1:n ) {
a_i <- strings[[i]]
strings_dists[i] <- get_dist(distances, a_i)
}
strings_dists
# use your own 'first' and 'last' objects
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
first <- c('H', 'A', 'O')
last <- c('W', 'A', 'N', 'G')
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- strings
n <- length(strings)
for ( i in 1:n ) {
a_i <- strings[[i]]
strings_dists[i] <- get_dist(distances, a_i)
}
strings_dists
strings_dists
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings
strings_dists
knitr::opts_chunk$set(echo = TRUE)
vec <- c(3, 1, 4)
for (j in 1:3) {
print(vec[j] + 1)
}
vec <- c(3, 1, 4)
for (i in vec) {
print(i * 3)
}
vec <- c(3, 1, 4)
vec2 <- rep(0, length(vec))
for (i in 1:3) {
vec2[ i ] <- vec[ i ] * 3
print( vec2 )
}
# Summation Series
n <- 10
series <- 0
for (k in 0:n) {
term <- 1 / ( 2 ^ k )
print( term )
series[ k + 1 ] <- term
}
sum( series )
#  The series converges as $n$ increase.
n <- 10
series <- 0
for ( k in 0:n) {
term <- 1 / (9 ^ k)
print( term )
series[ k + 1 ] <- term
}
sum(series)
#  The series converges as $n$ increase.
# Arithmetic Series
a_1 <- 3
d <- 3
n <- 10
series <- rep(0, n)
for ( k in 1 : n ) {
a_k <- a_1 + ( k - 1 ) * d
series[k] <- a_k
print(a_k)
}
#  The series doesn't converge as $n$ increase.
# Geometric Sequence
a_1 <- 3
r <- 2
n = 10
series <- rep (0, n)
for ( k in 0 : n ) {
a_k <- a_1 * ( r ^ k )
series [ k + 1 ] <- a_k
print(a_k)
}
sum(series)
#  The series doesn't converge as $n$ increase.
# Sine Approximation
n <- 10
x <- 1
sumation <- 0
for ( k  in 1 : n ) {
a_k <- ((x ^ (2 * k - 1)) / (factorial(2 * k - 1))) * (-1)^(k+1)
sumation <- sumation + a_k
print(sumation)
}
# For loop with a matrix
# empty matrix B
B <- matrix(1:20, nrow = 5, ncol = 4)
# for loop to get matrix B
for (i in 1:nrow(B)) {
for (j in 1:ncol(B)) {
B[i,j] <- B[i,j] + i
}
}
B
set.seed(123)
X <- matrix(rnorm(12), nrow = 4, ncol = 3)
X
# get a matrix Y such that the negative numbers in A are transformed into squared values, while the positive numbers in A are transformed into square root values
for ( i in 1 : nrow(X)) {
for ( j in 1 : ncol(X)) {
if (X[i, j] > 0) {
X[i, j] <- X[i, j] ^ (1/2)
}
else if (X[i, j] < 0) {
X[i, j] <- X[i, j] ^ 2
}
}
}
X
# Dividing a number by 2 multiple times
# Divide a number by 2 until it becomes odd.
val_rep <- 898128000 # Change this value!
repeat {
print(val_rep)
if (val_rep %% 2 == 1) { # If val_rep is odd,
break                  # end the loop.
}
val_rep <- val_rep / 2 # Divide val_rep by 2 since val_rep was even.
# When the end of the loop is reached, return to the beginning of the loop.
}
# Divide a number by 2 until it becomes odd.
val_while <- 898128000 # Change this value!
while (val_while %% 2 == 0) { # Continue the loop as long as val_while is even.
print(val_while)
val_while <- val_while / 2
}
print(val_while)
# reduce() function
reduce <- function(x) {
while (x %% 2 == 0) {
print(x)
x <- x / 2
}
print(x)
}
reduce(898128000)
# Average-for
n <- 100
average <- 0
for ( k in 1:100) {
a_k <- k / 100
average <- average + a_k
}
average
# Average-while
upper_bound <- 100
average <- 0
k <- 1
while ( k <= upper_bound ) {
average <- average + k / 100
k <- k + 1
}
average
# Average-repeat
upper_bound <- 100
average <- 0
k <- 1
repeat {
if ( k > upper_bound) {
break
}
average <- average + k / 100
k <- k + 1
}
average
# Standard Deviation - for
mean <- 50.5
k <- 1
n <- 100
sumation_for <- 0
for ( k in 1:100) {
a_k <- (k - mean) ^ 2 / (n - 1)
sumation_for <- sumation_for + a_k
}
sqrt(sumation_for)
# Standard Deviation - while
k <- 1
n <- 100
mean <- 50.5
sumation_while <- 0
while ( k <= n ) {
a_k <- ( k - mean ) ^ 2 / ( n - 1 )
sumation_while <- sumation_while + a_k
k <- k + 1
}
sqrt(sumation_while)
# Standard Deviation - repeat
k <- 1
n <- 100
mean <- 50.5
sumation_rep <- 0
repeat {
if ( k > 100 ) {
break
}
a_k <- ( k - mean ) ^ 2 / ( n - 1 )
sumation_rep <- sumation_rep + a_k
k <- k + 1
}
sqrt(sumation_rep)
# Geometric Mean - for
product_for <- 1
for( k in 1 : 50 ) {
product_for <- product_for * k
}
product_for ^ (1/n)
# Geometric Mean - while
k <- 1
n <- 50
product_while <- 1
while ( k <= n ) {
product_while <- product_while * k
k <- k + 1
}
product_while ^ (1/n)
# Geometric Mean - repeat
k <- 1
n <- 50
product_rep <- 1
repeat {
if ( k > n ) {
break
}
product_rep <- product_rep * k
k <- k + 1
}
product_rep ^ (1/n)
# Distance Matrix of Letters
# random distance matrix
num_letters <- length(LETTERS)
set.seed(123)
values <- sample.int(num_letters)
distances <- values %*% t(values)
diag(distances) <- 0
dimnames(distances) <- list(LETTERS, LETTERS)
get_dist <- function(dists, ltrs) {
if (!all(ltrs %in% LETTERS)) {
stop('Unrecognized character')
}
sum_dist <- 0
for (l in 1:(length(ltrs)-1)) {
from <- ltrs[l]
to <- ltrs[l+1]
sum_dist <- sum_dist + dists[from,to]
}
sum_dist
}
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
first <- c('H', 'A', 'O')
last <- c('W', 'A', 'N', 'G')
get_dist(distances, cal)
get_dist(distances, stats)
get_dist(distances, oski)
get_dist(distances, zzz)
get_dist(distances, lets)
get_dist(distances, first)
get_dist(distances, last)
# use your own 'first' and 'last' objects
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
first <- c('H', 'A', 'O')
last <- c('W', 'A', 'N', 'G')
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dists <- strings
n <- length(strings)
for ( i in 1:n ) {
a_i <- strings[[i]]
strings_dists[i] <- get_dist(distances, a_i)
}
strings_dists
getwd()
setwd(destktop/hw-stat133/hw03)
setwd("destktop/hw-stat133/hw03")
setwd("desktop")
setwd("hw-stat133")
setwd("hw03")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
download.file"https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv", data/)
download.file("https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv", data/)
download.file("https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv", data/)
download.file("https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv", data)
download.file("https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv", /data)
download.file("https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv", "data/")
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url)
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url, destfile = data/)
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url, destfile = 'data/')
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url, destfile = 'data/')
getwd()
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url, destfile = 'images/')
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url, destfile = 'data')
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url, destfile = 'nba2017-roster')
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/nba2017-roster.csv"
download.file(url, destfile = 'nba2017-roster')
dat <- read.csv('../data/nba2017-roster.cvs')
dat <- read.csv('data/nba2017-roster.cvs')
dat <- read.csv('data/nba2017-roster.cvs')
dat <- read.csv('data/nba2017-roster.cvs')
dat <- read.csv('../data/nba2017-roster.cvs')
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
dat <- read.csv('../data/nba2017-roster.cvs')
library(dplyr)
library(ggplot2)
dat <- read.csv('../data/nba2017-roster.cvs')
View(dat)
?sort
library(dplyr)
library(ggplot2)
dat <- read.csv('../data/nba2017-roster.cvs')
library(dplyr)
library(ggplot2)
dat <- read.csv('../data/nba2017-roster.cvs')
sort -1
sort -1 data/nba2017-roster.cvs
sort data/nba2017-roster.cvs
cut -c 1-7 data/nba2017-roster.cvs
cut -c 2-7 data/nba2017-roster.cvs
grep "CLE" data/nba2017-roster.cvs |
grep "GSW" data/nba2017-roster.cvs
grep "GSW" data/nba2017-roster.cvs
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
is_integer = function(x){
if (is.numeric(x) == FALSE) {return(FALSE)}
else {
if (x%%1==0){return(TRUE)}
else {return(FALSE)}
}
}
source(code/binomial-functions.R)
source(binomial-functions.R)
source(../code/binomial-functions.R)
source(../code/binomial-functions.R)
getwd()
source(code/binomial-functions.R)
source(code/binomial-functions.R)
source(code/binomial-functions.R)
source("code/binomial-functions.R")
source(".../code/binomial-functions.R")
source("../code/binomial-functions.R")
bin_probability(trials = =10, success = 3, prob = 1/2)
bin_probability(trials = 10, success = 3, prob = 1/2)
bin_distribution(trials = 10, prob = 0.25)
plot(bin_distribution(trials = 10, prob = 0.25))
distribution <- bin_distribution(trials = 10, prob = 0.25)
library(ggplot2)
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( x = successe, y = prob) + geom_path
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( x = "successe", y = "prob") + geom_path
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( x = "successe", y = "prob")
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point()
View(distribution)
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( x = "success_times", y = "probability")
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( ase(x = "success_times", y = "probability"))
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( aes(x = "success_times", y = "probability"))
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( aes(x = "success_times", y = "probability"))
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution) + geom_point( aes(x = "success_times", y = "probability")) + geom_path()
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution, aes(x = "success_times", y = "probability")) + geom_point() + geom_path()
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution, aes(x = "success_times", y = "probability")) + geom_point() + geom_path() + coord_cartesian(xlim = (0,20), ylim = (0,1))
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution, aes(x = "success_times", y = "probability")) + geom_point() + geom_path() + coord_cartesian(xlim = c(0,20), ylim = c(0,1))
distribution <- bin_distribution(trials = 10, prob = 0.25)
ggplot(distribution, aes(x = "success_times", y = "probability")) + geom_point() + geom_path() + coord_cartesian(xlim = c(-20,20), ylim = c(0,1))
distribution <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution)
?plot
distribution <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution type = l)
distribution <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution)
?plot
distribution <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution)
hist(distribution)
distribution <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution)
n <- c(3:5)
n <- c(3:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
n <- c(3:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
source("../code/binomial-functions.R")
bin_probability(trials = 10, success = 3, prob = 1/6)
distribution_1 <- bin_distribution(trials = 10, prob = 0.25)
plot(distribution_1)
n <- c(3:5)
probability <- 0
for ( k in n ) {
prob_k <- bin_probability(trials = 5, success = k, prob = 0.35)
probability <- probability + prob_k
}
probability
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2)
distribution_2 <- bin_distribution(trials = 15, prob = 0.35)
plot(distribution_2)
